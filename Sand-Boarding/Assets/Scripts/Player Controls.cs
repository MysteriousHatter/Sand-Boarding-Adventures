//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Player Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Controls"",
    ""maps"": [
        {
            ""name"": ""Tricks"",
            ""id"": ""bdd130ea-c0a6-4f1e-850d-96c21712edda"",
            ""actions"": [
                {
                    ""name"": ""TrickUp"",
                    ""type"": ""Button"",
                    ""id"": ""b45bf1d7-f59b-4333-9e7b-0cde750ea19c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TrickDown"",
                    ""type"": ""Button"",
                    ""id"": ""cef71513-8a84-4916-8973-191cee2aacf3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TrickLeft"",
                    ""type"": ""Button"",
                    ""id"": ""4bbb23a5-283f-4ca8-aed4-c0a4b93f30c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TrickRight"",
                    ""type"": ""Button"",
                    ""id"": ""662034a4-09a7-4945-bf2a-6b0513b56509"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TrickFinisherLeft"",
                    ""type"": ""Button"",
                    ""id"": ""b5b00106-6c9c-4c0e-a0b8-b8a3955ce1c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TrickFinisherRight"",
                    ""type"": ""Button"",
                    ""id"": ""235b1527-7d59-470e-a528-e8dd7fefd197"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fa9fd317-91d2-4694-85e9-95c08f8126fe"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TrickUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1fa4560f-d517-47d0-90c0-e5351d781bb8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TrickDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1361d1c5-1bd0-461a-9aeb-b551601cb90b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TrickLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d31cb351-72c8-4fc3-9cfb-e2ffa0262ead"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TrickRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6400577f-4901-4c91-a36a-194a40e9b37d"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TrickFinisherLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""343d4b90-56b7-4abe-9d88-a473ba25c5e2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TrickFinisherRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Controls"",
            ""id"": ""aebffd21-be84-4cc4-88de-17fd5a84c06f"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""02503e2d-cf41-4f2b-b7ac-9f4690960389"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""0ecacff9-5794-4455-9feb-cfc1a5cce1f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Down Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""98c69fc4-4193-4e8d-af50-d24e0e10f174"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Speed Up/Slow Down"",
                    ""type"": ""Value"",
                    ""id"": ""838b9536-5e6e-4329-a0de-af62213209ab"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""3fef1ac1-a6f5-4029-a260-920cc699ee09"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5f7402fa-67b8-4831-8725-e3c0db09a013"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be2f8543-9d11-41e2-9939-b15c2f9a140a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4f9125b-3a3a-4cbf-af6a-52d72472ed14"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""e749c229-3127-4ad0-bcbb-a9d7c2f594c9"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Speed Up/Slow Down"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""878b26bf-4168-4027-840c-f036116d9567"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Speed Up/Slow Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""50f257eb-001b-4437-86f7-7e78c41b0cec"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Speed Up/Slow Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8344a889-6e7e-499d-a3c8-2b93ba8a3244"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Testing"",
            ""id"": ""4d399170-f67e-4385-871b-d60585a904ca"",
            ""actions"": [
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""1bdfa7e7-d032-4153-8099-71a9aff883e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cde9eea9-c0dd-424f-9127-e54080c63434"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Grinding"",
            ""id"": ""ab45b820-9841-4b72-965b-66942e39a151"",
            ""actions"": [
                {
                    ""name"": ""Balancing"",
                    ""type"": ""Value"",
                    ""id"": ""27769ffb-b41e-422e-b0ee-164228193077"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""15a5c334-cef8-4eb9-9b9e-1d1ff4448595"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""deaaf187-bf9e-40e9-beb5-87e8d817a9be"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Balancing"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""20e2a933-e58e-4d4a-92a1-c8f7a7f89678"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Balancing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0080344b-143e-4a57-bd79-5cec5692715e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Balancing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3168cd08-31f3-4ef0-ad0e-3961be025aa4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Tricks
        m_Tricks = asset.FindActionMap("Tricks", throwIfNotFound: true);
        m_Tricks_TrickUp = m_Tricks.FindAction("TrickUp", throwIfNotFound: true);
        m_Tricks_TrickDown = m_Tricks.FindAction("TrickDown", throwIfNotFound: true);
        m_Tricks_TrickLeft = m_Tricks.FindAction("TrickLeft", throwIfNotFound: true);
        m_Tricks_TrickRight = m_Tricks.FindAction("TrickRight", throwIfNotFound: true);
        m_Tricks_TrickFinisherLeft = m_Tricks.FindAction("TrickFinisherLeft", throwIfNotFound: true);
        m_Tricks_TrickFinisherRight = m_Tricks.FindAction("TrickFinisherRight", throwIfNotFound: true);
        // Controls
        m_Controls = asset.FindActionMap("Controls", throwIfNotFound: true);
        m_Controls_Pause = m_Controls.FindAction("Pause", throwIfNotFound: true);
        m_Controls_UpRotation = m_Controls.FindAction("Up Rotation", throwIfNotFound: true);
        m_Controls_DownRotation = m_Controls.FindAction("Down Rotation", throwIfNotFound: true);
        m_Controls_SpeedUpSlowDown = m_Controls.FindAction("Speed Up/Slow Down", throwIfNotFound: true);
        m_Controls_Jump = m_Controls.FindAction("Jump", throwIfNotFound: true);
        // Testing
        m_Testing = asset.FindActionMap("Testing", throwIfNotFound: true);
        m_Testing_Restart = m_Testing.FindAction("Restart", throwIfNotFound: true);
        // Grinding
        m_Grinding = asset.FindActionMap("Grinding", throwIfNotFound: true);
        m_Grinding_Balancing = m_Grinding.FindAction("Balancing", throwIfNotFound: true);
        m_Grinding_Jump = m_Grinding.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Tricks
    private readonly InputActionMap m_Tricks;
    private List<ITricksActions> m_TricksActionsCallbackInterfaces = new List<ITricksActions>();
    private readonly InputAction m_Tricks_TrickUp;
    private readonly InputAction m_Tricks_TrickDown;
    private readonly InputAction m_Tricks_TrickLeft;
    private readonly InputAction m_Tricks_TrickRight;
    private readonly InputAction m_Tricks_TrickFinisherLeft;
    private readonly InputAction m_Tricks_TrickFinisherRight;
    public struct TricksActions
    {
        private @PlayerControls m_Wrapper;
        public TricksActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @TrickUp => m_Wrapper.m_Tricks_TrickUp;
        public InputAction @TrickDown => m_Wrapper.m_Tricks_TrickDown;
        public InputAction @TrickLeft => m_Wrapper.m_Tricks_TrickLeft;
        public InputAction @TrickRight => m_Wrapper.m_Tricks_TrickRight;
        public InputAction @TrickFinisherLeft => m_Wrapper.m_Tricks_TrickFinisherLeft;
        public InputAction @TrickFinisherRight => m_Wrapper.m_Tricks_TrickFinisherRight;
        public InputActionMap Get() { return m_Wrapper.m_Tricks; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TricksActions set) { return set.Get(); }
        public void AddCallbacks(ITricksActions instance)
        {
            if (instance == null || m_Wrapper.m_TricksActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TricksActionsCallbackInterfaces.Add(instance);
            @TrickUp.started += instance.OnTrickUp;
            @TrickUp.performed += instance.OnTrickUp;
            @TrickUp.canceled += instance.OnTrickUp;
            @TrickDown.started += instance.OnTrickDown;
            @TrickDown.performed += instance.OnTrickDown;
            @TrickDown.canceled += instance.OnTrickDown;
            @TrickLeft.started += instance.OnTrickLeft;
            @TrickLeft.performed += instance.OnTrickLeft;
            @TrickLeft.canceled += instance.OnTrickLeft;
            @TrickRight.started += instance.OnTrickRight;
            @TrickRight.performed += instance.OnTrickRight;
            @TrickRight.canceled += instance.OnTrickRight;
            @TrickFinisherLeft.started += instance.OnTrickFinisherLeft;
            @TrickFinisherLeft.performed += instance.OnTrickFinisherLeft;
            @TrickFinisherLeft.canceled += instance.OnTrickFinisherLeft;
            @TrickFinisherRight.started += instance.OnTrickFinisherRight;
            @TrickFinisherRight.performed += instance.OnTrickFinisherRight;
            @TrickFinisherRight.canceled += instance.OnTrickFinisherRight;
        }

        private void UnregisterCallbacks(ITricksActions instance)
        {
            @TrickUp.started -= instance.OnTrickUp;
            @TrickUp.performed -= instance.OnTrickUp;
            @TrickUp.canceled -= instance.OnTrickUp;
            @TrickDown.started -= instance.OnTrickDown;
            @TrickDown.performed -= instance.OnTrickDown;
            @TrickDown.canceled -= instance.OnTrickDown;
            @TrickLeft.started -= instance.OnTrickLeft;
            @TrickLeft.performed -= instance.OnTrickLeft;
            @TrickLeft.canceled -= instance.OnTrickLeft;
            @TrickRight.started -= instance.OnTrickRight;
            @TrickRight.performed -= instance.OnTrickRight;
            @TrickRight.canceled -= instance.OnTrickRight;
            @TrickFinisherLeft.started -= instance.OnTrickFinisherLeft;
            @TrickFinisherLeft.performed -= instance.OnTrickFinisherLeft;
            @TrickFinisherLeft.canceled -= instance.OnTrickFinisherLeft;
            @TrickFinisherRight.started -= instance.OnTrickFinisherRight;
            @TrickFinisherRight.performed -= instance.OnTrickFinisherRight;
            @TrickFinisherRight.canceled -= instance.OnTrickFinisherRight;
        }

        public void RemoveCallbacks(ITricksActions instance)
        {
            if (m_Wrapper.m_TricksActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITricksActions instance)
        {
            foreach (var item in m_Wrapper.m_TricksActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TricksActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TricksActions @Tricks => new TricksActions(this);

    // Controls
    private readonly InputActionMap m_Controls;
    private List<IControlsActions> m_ControlsActionsCallbackInterfaces = new List<IControlsActions>();
    private readonly InputAction m_Controls_Pause;
    private readonly InputAction m_Controls_UpRotation;
    private readonly InputAction m_Controls_DownRotation;
    private readonly InputAction m_Controls_SpeedUpSlowDown;
    private readonly InputAction m_Controls_Jump;
    public struct ControlsActions
    {
        private @PlayerControls m_Wrapper;
        public ControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_Controls_Pause;
        public InputAction @UpRotation => m_Wrapper.m_Controls_UpRotation;
        public InputAction @DownRotation => m_Wrapper.m_Controls_DownRotation;
        public InputAction @SpeedUpSlowDown => m_Wrapper.m_Controls_SpeedUpSlowDown;
        public InputAction @Jump => m_Wrapper.m_Controls_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlsActions set) { return set.Get(); }
        public void AddCallbacks(IControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlsActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @UpRotation.started += instance.OnUpRotation;
            @UpRotation.performed += instance.OnUpRotation;
            @UpRotation.canceled += instance.OnUpRotation;
            @DownRotation.started += instance.OnDownRotation;
            @DownRotation.performed += instance.OnDownRotation;
            @DownRotation.canceled += instance.OnDownRotation;
            @SpeedUpSlowDown.started += instance.OnSpeedUpSlowDown;
            @SpeedUpSlowDown.performed += instance.OnSpeedUpSlowDown;
            @SpeedUpSlowDown.canceled += instance.OnSpeedUpSlowDown;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IControlsActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @UpRotation.started -= instance.OnUpRotation;
            @UpRotation.performed -= instance.OnUpRotation;
            @UpRotation.canceled -= instance.OnUpRotation;
            @DownRotation.started -= instance.OnDownRotation;
            @DownRotation.performed -= instance.OnDownRotation;
            @DownRotation.canceled -= instance.OnDownRotation;
            @SpeedUpSlowDown.started -= instance.OnSpeedUpSlowDown;
            @SpeedUpSlowDown.performed -= instance.OnSpeedUpSlowDown;
            @SpeedUpSlowDown.canceled -= instance.OnSpeedUpSlowDown;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IControlsActions instance)
        {
            if (m_Wrapper.m_ControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlsActions @Controls => new ControlsActions(this);

    // Testing
    private readonly InputActionMap m_Testing;
    private List<ITestingActions> m_TestingActionsCallbackInterfaces = new List<ITestingActions>();
    private readonly InputAction m_Testing_Restart;
    public struct TestingActions
    {
        private @PlayerControls m_Wrapper;
        public TestingActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Restart => m_Wrapper.m_Testing_Restart;
        public InputActionMap Get() { return m_Wrapper.m_Testing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestingActions set) { return set.Get(); }
        public void AddCallbacks(ITestingActions instance)
        {
            if (instance == null || m_Wrapper.m_TestingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TestingActionsCallbackInterfaces.Add(instance);
            @Restart.started += instance.OnRestart;
            @Restart.performed += instance.OnRestart;
            @Restart.canceled += instance.OnRestart;
        }

        private void UnregisterCallbacks(ITestingActions instance)
        {
            @Restart.started -= instance.OnRestart;
            @Restart.performed -= instance.OnRestart;
            @Restart.canceled -= instance.OnRestart;
        }

        public void RemoveCallbacks(ITestingActions instance)
        {
            if (m_Wrapper.m_TestingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITestingActions instance)
        {
            foreach (var item in m_Wrapper.m_TestingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TestingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TestingActions @Testing => new TestingActions(this);

    // Grinding
    private readonly InputActionMap m_Grinding;
    private List<IGrindingActions> m_GrindingActionsCallbackInterfaces = new List<IGrindingActions>();
    private readonly InputAction m_Grinding_Balancing;
    private readonly InputAction m_Grinding_Jump;
    public struct GrindingActions
    {
        private @PlayerControls m_Wrapper;
        public GrindingActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Balancing => m_Wrapper.m_Grinding_Balancing;
        public InputAction @Jump => m_Wrapper.m_Grinding_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Grinding; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GrindingActions set) { return set.Get(); }
        public void AddCallbacks(IGrindingActions instance)
        {
            if (instance == null || m_Wrapper.m_GrindingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GrindingActionsCallbackInterfaces.Add(instance);
            @Balancing.started += instance.OnBalancing;
            @Balancing.performed += instance.OnBalancing;
            @Balancing.canceled += instance.OnBalancing;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IGrindingActions instance)
        {
            @Balancing.started -= instance.OnBalancing;
            @Balancing.performed -= instance.OnBalancing;
            @Balancing.canceled -= instance.OnBalancing;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IGrindingActions instance)
        {
            if (m_Wrapper.m_GrindingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGrindingActions instance)
        {
            foreach (var item in m_Wrapper.m_GrindingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GrindingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GrindingActions @Grinding => new GrindingActions(this);
    public interface ITricksActions
    {
        void OnTrickUp(InputAction.CallbackContext context);
        void OnTrickDown(InputAction.CallbackContext context);
        void OnTrickLeft(InputAction.CallbackContext context);
        void OnTrickRight(InputAction.CallbackContext context);
        void OnTrickFinisherLeft(InputAction.CallbackContext context);
        void OnTrickFinisherRight(InputAction.CallbackContext context);
    }
    public interface IControlsActions
    {
        void OnPause(InputAction.CallbackContext context);
        void OnUpRotation(InputAction.CallbackContext context);
        void OnDownRotation(InputAction.CallbackContext context);
        void OnSpeedUpSlowDown(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface ITestingActions
    {
        void OnRestart(InputAction.CallbackContext context);
    }
    public interface IGrindingActions
    {
        void OnBalancing(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
